from aiogram import Bot
from database.repository import user_repository
from services.result_service import result_service
import asyncio
import logging
from config.settings import settings
from utils.phrases import get_phrase
logger = logging.getLogger(__name__)


class NotificationService:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.is_running = False

    async def start_monitoring(self) -> None:
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        if self.is_running:
            return

        self.is_running = True
        logger.info("Starting result monitoring")

        while self.is_running:
            try:
                await self._check_all_users()
                await asyncio.sleep(settings.check_interval)
            except Exception as e:
                logger.error(f"Error in monitoring loop: {str(e)}")
                await asyncio.sleep(60)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def stop_monitoring(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_running = False
        logger.info("Stopping result monitoring")

    async def _check_all_users(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        users = await user_repository.get_all_users()
        logger.info(f"Checking results for {len(users)} users")

        tasks = []
        for user in users:
            task = asyncio.create_task(self._check_user_result(user.user_id))
            tasks.append(task)

        if tasks:
            await asyncio.gather(*tasks, return_exceptions=True)

    async def _check_user_result(self, user_id: int) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            new_result = await result_service.check_result_changes(user_id)
            if new_result:
                await self._send_notification(user_id, new_result)
        except Exception as e:
            logger.error(f"Error checking user {user_id}: {str(e)}")

    async def _send_notification(self, user_id: int, result: tuple) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            new, prev = result
            message = f"üîî –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≤–∞—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö:\n\n{new}\n\n***¬´{get_phrase()}¬ª***"
            await self.bot.send_message(user_id, message, parse_mode='Markdown')
            logger.info(f"Notification sent to user {user_id}")
        except Exception as e:
            logger.error(f"Failed to send notification to user {user_id}: {str(e)}")
