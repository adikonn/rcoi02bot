from aiogram import Router, F
from aiogram.types import Message, BufferedInputFile, CallbackQuery
from aiogram.utils.media_group import MediaGroupBuilder
from aiogram.filters import Command
from services.result_service import result_service
from utils.phrases import get_phrase
from utils.images import create_table_image
import logging

logger = logging.getLogger(__name__)
router = Router()


@router.message(Command("get_result"))
async def get_result_command(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_result"""
    await message.answer("‚è≥ –ü–æ–ª—É—á–∞—é –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    try:
        result = await result_service.get_user_result(message.from_user.id)

        if result == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /start":
            await message.answer(result)
        elif result == "error server":
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –°–∞–π—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        elif result == "account does not exist. please check and try again":
            await message.answer(
                "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö "
                "–ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "
                "–∫–æ–º–∞–Ω–¥—É /reregister –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
        else:
            headers, data, keyboard = result[0][0], result[0][1], result[1]
            table_image = BufferedInputFile(file=create_table_image(headers, data).getvalue(), filename='image.png')
            await message.answer_photo(photo=table_image, caption=f"üìä **–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**\n\n***¬´{get_phrase()}¬ª***", parse_mode="Markdown", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"Error in get_result_command: {str(e)}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
@router.callback_query(F.data.startswith("id"))
async def get_more(call: CallbackQuery):
    await call.message.edit_text("‚è≥ –ü–æ–ª—É—á–∞—é –≤–∞—à–∏ –±–ª–∞–Ω–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    page_id = call.data.replace("id", "")
    images = await result_service.get_images(call.message.chat.id, page_id)
    if images:
        media_group = MediaGroupBuilder()
        for i in range(len(images)):
            if i == 0:
                media_group.add(type='photo', media=images[i], caption='–í–æ—Ç –æ–Ω–∏, –≤–∞—à–∏ –±–ª–∞–Ω–∫–∏!')
            else:
                media_group.add(type='photo', media=images[i])
        await call.message.delete()
        await call.message.answer_media_group(media=media_group.build())
@router.callback_query(F.data.startswith("back"))
async def back(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_result"""

    try:
        result = await result_service.get_user_result(call.message.from_user.id)

        if result == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /start":
            await call.message.edit_text(result)
        elif result == "error server":
            await call.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –°–∞–π—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        elif result == "account does not exist. please check and try again":
            await call.message.edit_text(
                "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö "
                "–ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "
                "–∫–æ–º–∞–Ω–¥—É /reregister –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
        else:
            headers, data, keyboard = result[0][0], result[0][1], result[1]
            table_image = BufferedInputFile(file=create_table_image(headers, data).getvalue(), filename='image.png')
            media_group = MediaGroupBuilder()
            media_group.add(type='photo', media=table_image)
            await call.message.edit_media(media=media_group.build(), caption=f"üìä **–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**\n\n***¬´{get_phrase()}¬ª***",
                                       parse_mode="Markdown", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"Error in get_result_command: {str(e)}")
        await call.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )