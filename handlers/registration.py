from aiogram import Router, F
from aiogram.types import Message, BufferedInputFile
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from states.registration import RegistrationStates
from database.repository import user_repository
from utils.phrases import get_phrase
from utils.images import create_table_image
import re
import logging
from utils.parsers import get_content, print_result, extract_table_tb_result
logger = logging.getLogger(__name__)
router = Router()


@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    msg = await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ì–ò–ê!\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:"
    )
    await state.set_state(RegistrationStates.waiting_for_family)
    await state.update_data(message=msg)

@router.message(Command("reregister"))
async def reregister_command(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reregister"""
    msg = await message.answer("–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")

    await state.set_state(RegistrationStates.waiting_for_family)
    await state.update_data(message=msg)



@router.message(StateFilter(RegistrationStates.waiting_for_family))
async def process_family(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏"""
    await message.delete()
    family = message.text.strip()
    data = await state.get_data()
    msg = data['message']
    if not family or not family.replace('-', '').replace(' ', '').isalpha():
        await msg.edit_text(
            "‚ùå –§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    await state.update_data(family=family)
    await msg.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(RegistrationStates.waiting_for_name)


@router.message(StateFilter(RegistrationStates.waiting_for_name))
async def process_name(message: Message, state: FSMContext) -> None:
    await message.delete()

    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    data = await state.get_data()
    msg = data['message']

    name = message.text.strip()

    if not name or not name.replace('-', '').replace(' ', '').isalpha():
        await msg.edit_text(
            "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    await state.update_data(name=name)
    await msg.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ—Ç—á–µ—Å—Ç–≤–æ:")
    await state.set_state(RegistrationStates.waiting_for_father)


@router.message(StateFilter(RegistrationStates.waiting_for_father))
async def process_father(message: Message, state: FSMContext) -> None:
    await message.delete()

    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Ç—á–µ—Å—Ç–≤–∞"""
    data = await state.get_data()
    msg = data['message']

    father = message.text.strip()

    if not father or not father.replace('-', '').replace(' ', '').isalpha():
        await msg.edit_text(
            "‚ùå –û—Ç—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    await state.update_data(father=father)
    await msg.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞ (6-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä):")
    await state.set_state(RegistrationStates.waiting_for_number)


@router.message(StateFilter(RegistrationStates.waiting_for_number))
async def process_number(message: Message, state: FSMContext) -> None:
    await message.delete()

    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–µ—Ä–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    data = await state.get_data()
    msg = data['message']

    number = message.text.strip()

    if not re.match(r'^\d{6}$', number):
        await msg.edit_text(
            "‚ùå –°–µ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 —Ü–∏—Ñ—Ä.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    await state.update_data(number=number)
    await msg.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å (9 –∏–ª–∏ 11):")
    await state.set_state(RegistrationStates.waiting_for_class)


@router.message(StateFilter(RegistrationStates.waiting_for_class))
async def process_class(message: Message, state: FSMContext) -> None:
    await message.delete()

    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–ª–∞—Å—Å–∞"""
    data = await state.get_data()
    msg = data['message']
    class_value = message.text.strip()

    if class_value not in ['9', '11']:
        await msg.edit_text(
            "‚ùå –ö–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 9 –∏–ª–∏ 11.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    data['class_'] = class_value

    try:
        content = get_content(family=data['family'],
            name=data['name'],
            father=data['father'],
            number=data['number'],
            class_=data['class_'])
        result = print_result(content)
        if result == "error server":
            await msg.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        elif result == "account does not exist. please check and try again":
            await msg.edit_text(
                "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö "
                "–ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö."
            )
        else:
            await msg.delete()
            table_image = BufferedInputFile(file=create_table_image(*result).getvalue(), filename='image.png')
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await user_repository.create_user(
                user_id=message.from_user.id,
                family=data['family'],
                name=data['name'],
                father=data['father'],
                number=data['number'],
                class_=data['class_']
            )
            current_result = extract_table_tb_result(content)
            await user_repository.update_user_result(message.chat.id, current_result)
            await message.answer_photo(photo=table_image, caption=f"üìä **–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**\n\n{result}\n***¬´{get_phrase()}¬ª***", parse_mode='Markdown')
            await message.answer(
                "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /get_result –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
                "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö\n"
                "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /profile\n\n"
                "–ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç –∏ –æ–ø–æ–≤–µ—â–∞—Ç—å –≤–∞—Å, –µ—Å–ª–∏ –ø—Ä–∏–¥—É—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–æ–≤—ã—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤."
            )

            logger.info(f"User {message.from_user.id} registered successfully")

    except Exception as e:
        logger.error(f"Error saving user {message.from_user.id}: {str(e)}")
        await msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start"
        )

    finally:
        await state.clear()


@router.message(StateFilter(RegistrationStates))
async def process_invalid_input(message: Message, state: FSMContext) -> None:
    await message.delete()

    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤–æ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    data = await state.get_data()
    msg = data['message']

    current_state = await state.get_state()

    if current_state == RegistrationStates.waiting_for_family:
        text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:"
    elif current_state == RegistrationStates.waiting_for_name:
        text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    elif current_state == RegistrationStates.waiting_for_father:
        text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ—Ç—á–µ—Å—Ç–≤–æ:"
    elif current_state == RegistrationStates.waiting_for_number:
        text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞ (6-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä):"
    elif current_state == RegistrationStates.waiting_for_class:
        text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å (9 –∏–ª–∏ 11):"
    else:
        text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."

    await msg.edit_text(text)
